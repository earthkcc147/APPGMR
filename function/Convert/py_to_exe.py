import os
import requests
from shutil import rmtree
from zipfile import ZipFile, ZIP_DEFLATED

# กำหนดการเปิด/ปิดการส่งข้อมูลไปยัง Webhook
SEND_TO_WEBHOOK = True

# URL ของ Webhook ที่จะส่งข้อมูลไป
WEBHOOK_URL = "https://example.com/webhook"  # เปลี่ยนเป็น URL ของ Webhook ที่คุณต้องการ

REMOVE_SPEC = True
REMOVE_BUILD = True

# สร้างโฟลเดอร์ py ถ้ายังไม่มี
PY_TO_EXE_DIR = 'py'
EXE_DIR = 'exe'  # โฟลเดอร์สำหรับเก็บไฟล์ .exe

def create_directory():
    if not os.path.exists(PY_TO_EXE_DIR):
        os.makedirs(PY_TO_EXE_DIR)
    if not os.path.exists(EXE_DIR):
        os.makedirs(EXE_DIR)

def show_files():
    create_directory()
    py_files = [f for f in os.listdir(PY_TO_EXE_DIR) if f.endswith('.py')]
    if not py_files:
        print("ไม่พบไฟล์ .py ในโฟลเดอร์ py")
    else:
        print("ไฟล์ .py ที่พบใน py:")
        for idx, file in enumerate(py_files, 1):
            print(f"{idx}. {file}")

def generate_executable():
    create_directory()
    py_files = [f for f in os.listdir(PY_TO_EXE_DIR) if f.endswith('.py')]
    if not py_files:
        print("ไม่พบไฟล์ .py ในโฟลเดอร์ py")
        return

    print("ไฟล์ .py ที่พบใน py:")
    for idx, file in enumerate(py_files, 1):
        print(f"{idx}. {file}")

    try:
        file_choice = int(input("กรุณาเลือกไฟล์ที่ต้องการแปลงเป็น executable (กรอกหมายเลข): "))
        if file_choice < 1 or file_choice > len(py_files):
            print("หมายเลขไฟล์ไม่ถูกต้อง!")
            return
        script_name = py_files[file_choice - 1]
        script_path = os.path.join(PY_TO_EXE_DIR, script_name)
        
        print(f'Generating executable for {script_name}...')
        exe_name = script_name[:-3] + '.exe'
        exe_path = os.path.join(EXE_DIR, exe_name)

        os.system(f'python -m PyInstaller {script_path} --onefile --distpath {EXE_DIR}')

        if REMOVE_SPEC:
            print(f'Removing {script_name[:-3]}.spec file...')
            os.remove(f'{script_name[:-3]}.spec')
        if REMOVE_BUILD:
            print('Removing build directory...')
            rmtree('build')

        # ถามว่าต้องการบีบอัดเป็น .zip หรือไม่
        zip_choice = input("ต้องการบีบอัดไฟล์เป็น .zip หรือไม่? (y/n, กด Enter เพื่อไม่บีบอัด): ").lower()
        if zip_choice == 'y':
            zip_name = exe_name[:-4]
            password = input("กรุณาใส่รหัสผ่านสำหรับ zip (กด Enter เพื่อไม่ตั้งรหัส): ")
            zip_path = os.path.join(EXE_DIR, f"{zip_name}_{password if password else 'no-pass'}.zip")
            with ZipFile(zip_path, 'w', ZIP_DEFLATED) as zipf:
                zipf.write(exe_path, arcname=exe_name)
                if password:
                    zipf.setpassword(password.encode('utf-8'))
            print(f"ไฟล์ถูกบีบอัดและบันทึกที่ {zip_path}")
            file_to_send = zip_path
        else:  # หากกรอก Enter หรือเลือก n
            file_to_send = exe_path

        if SEND_TO_WEBHOOK:
            embed = {
                "username": "Executable Generator",
                "embeds": [
                    {
                        "title": "Executable Generation Status",
                        "description": f"Executable for `{script_name}` has been generated successfully!",
                        "color": 3066993,
                        "fields": [
                            {"name": "File Name", "value": script_name, "inline": True},
                            {"name": "Status", "value": "Success", "inline": True}
                        ],
                        "footer": {"text": "Generated by PyInstaller"}
                    }
                ]
            }
            try:
                files = {'file': open(file_to_send, 'rb')}
                response = requests.post(WEBHOOK_URL, json=embed, files=files)
                if response.status_code == 200:
                    print("ข้อมูลถูกส่งไปที่ Webhook สำเร็จ")
                else:
                    print(f"ส่งข้อมูลไปที่ Webhook ไม่สำเร็จ, รหัสสถานะ: {response.status_code}")
            except requests.exceptions.RequestException as e:
                print(f"เกิดข้อผิดพลาดในการส่งข้อมูลไปที่ Webhook: {e}")

    except Exception as e:
        print(f'Error generating executable: {e}')

def show_menu():
    show_files()
    print("\n----- Main Menu -----")
    print("1. สร้าง executable จากไฟล์ .py")
    print("2. ออกจากโปรแกรม")
    choice = input("กรุณาเลือกตัวเลือก (1 หรือ 2): ")
    if choice == '1':
        generate_executable()
    elif choice == '2':
        print("ขอบคุณที่ใช้โปรแกรม!")
        exit()
    else:
        print("ตัวเลือกไม่ถูกต้อง! กรุณาเลือกใหม่.")
        show_menu()

show_menu()


