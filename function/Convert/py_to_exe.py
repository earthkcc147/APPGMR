import os
import requests
from shutil import rmtree

# กำหนดการเปิด/ปิดการส่งข้อมูลไปยัง Webhook
SEND_TO_WEBHOOK = True

# URL ของ Webhook ที่จะส่งข้อมูลไป
WEBHOOK_URL = "https://example.com/webhook"  # เปลี่ยนเป็น URL ของ Webhook ที่คุณต้องการ

REMOVE_SPEC = True
REMOVE_BUILD = True

# สร้างโฟลเดอร์ py_to_exe ถ้ายังไม่มี
PY_TO_EXE_DIR = 'py_to_exe'
EXE_DIR = 'exe'  # โฟลเดอร์สำหรับเก็บไฟล์ .exe

def create_directory():
    # ตรวจสอบว่าโฟลเดอร์ py_to_exe และ exe มีอยู่หรือไม่ ถ้าไม่มีก็จะสร้าง
    if not os.path.exists(PY_TO_EXE_DIR):
        os.makedirs(PY_TO_EXE_DIR)

    if not os.path.exists(EXE_DIR):
        os.makedirs(EXE_DIR)

def show_files():
    # แสดงไฟล์ .py ที่มีในโฟลเดอร์ py_to_exe
    create_directory()
    py_files = [f for f in os.listdir(PY_TO_EXE_DIR) if f.endswith('.py')]

    # ถ้าไม่พบไฟล์ .py ในโฟลเดอร์ py_to_exe
    if not py_files:
        print("ไม่พบไฟล์ .py ในโฟลเดอร์ py_to_exe")
    else:
        print("ไฟล์ .py ที่พบใน py_to_exe:")
        for idx, file in enumerate(py_files, 1):
            print(f"{idx}. {file}")

def generate_executable():
    # แสดงไฟล์ .py ที่มีในโฟลเดอร์ py_to_exe
    create_directory()
    py_files = [f for f in os.listdir(PY_TO_EXE_DIR) if f.endswith('.py')]

    # ถ้าไม่พบไฟล์ .py ในโฟลเดอร์ py_to_exe
    if not py_files:
        print("ไม่พบไฟล์ .py ในโฟลเดอร์ py_to_exe")
        return

    print("ไฟล์ .py ที่พบใน py_to_exe:")
    for idx, file in enumerate(py_files, 1):
        print(f"{idx}. {file}")

    # รับการเลือกไฟล์จากผู้ใช้
    try:
        file_choice = int(input("กรุณาเลือกไฟล์ที่ต้องการแปลงเป็น executable (กรอกหมายเลข): "))
        if file_choice < 1 or file_choice > len(py_files):
            print("หมายเลขไฟล์ไม่ถูกต้อง!")
            return
        script_name = py_files[file_choice - 1]
        script_path = os.path.join(PY_TO_EXE_DIR, script_name)
        
        print(f'Generating executable for {script_name}...')

        # การตั้งชื่อไฟล์ .exe ให้ตรงกับไฟล์ .py ที่เลือก
        exe_name = script_name[:-3] + '.exe'
        exe_path = os.path.join(EXE_DIR, exe_name)

        # สั่งให้ PyInstaller สร้างไฟล์ .exe ไปยังโฟลเดอร์ exe
        os.system(f'python -m PyInstaller {script_path} --onefile --distpath {EXE_DIR}')

        # ถ้าต้องการลบไฟล์ .spec
        if REMOVE_SPEC:
            print(f'Removing {script_name[:-3]}.spec file...')
            os.remove(f'{script_name[:-3]}.spec')

        # ถ้าต้องการลบโฟลเดอร์ build
        if REMOVE_BUILD:
            print('Removing build directory...')
            rmtree('build')

        # ถ้าต้องการส่งข้อมูลไปที่ Webhook
        if SEND_TO_WEBHOOK:
            embed = {
                "username": "Executable Generator",
                "embeds": [
                    {
                        "title": "Executable Generation Status",
                        "description": f"Executable for `{script_name}` has been generated successfully!",
                        "color": 3066993,  # สีเขียว
                        "fields": [
                            {
                                "name": "File Name",
                                "value": script_name,
                                "inline": True
                            },
                            {
                                "name": "Status",
                                "value": "Success",
                                "inline": True
                            }
                        ],
                        "footer": {
                            "text": "Generated by PyInstaller"
                        }
                    }
                ]
            }

            try:
                # ส่งข้อมูลเป็น POST request ไปที่ Webhook
                response = requests.post(WEBHOOK_URL, json=embed)

                # เช็คผลลัพธ์การส่งข้อมูล
                if response.status_code == 200:
                    print("ข้อมูลถูกส่งไปที่ Webhook สำเร็จ")
                else:
                    print(f"ส่งข้อมูลไปที่ Webhook ไม่สำเร็จ, รหัสสถานะ: {response.status_code}")
            except requests.exceptions.RequestException as e:
                print(f"เกิดข้อผิดพลาดในการส่งข้อมูลไปที่ Webhook: {e}")

    except Exception as e:
        print(f'Error generating executable for {script_name}: {e}')


def show_menu():
    # แสดงไฟล์ .py ก่อน
    show_files()

    print("\n----- Main Menu -----")
    print("1. สร้าง executable จากไฟล์ .py")
    print("2. ออกจากโปรแกรม")
    choice = input("กรุณาเลือกตัวเลือก (1 หรือ 2): ")

    if choice == '1':
        generate_executable()
    elif choice == '2':
        print("ขอบคุณที่ใช้โปรแกรม!")
        exit()
    else:
        print("ตัวเลือกไม่ถูกต้อง! กรุณาเลือกใหม่.")
        show_menu()


# เรียกฟังก์ชัน show_menu เพื่อแสดงเมนู
show_menu()